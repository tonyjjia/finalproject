#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 20 21:36:51 2020

@author: yihaoli
"""

import pandas as pd
import pandas_dedupe

import numpy as np
import os

from fuzzywuzzy import fuzz
from fuzzywuzzy import process

import matplotlib.pyplot as plt

import bokeh
from bokeh.plotting import figure, output_file, show
from bokeh.layouts import gridplot

import geopandas
from geopandas import GeoDataFrame

############################################################################################################

# Data Loading and Cleaning

############################################################################################################


# Load the geographic information data of public high schools in Chicago 
# District 299:

# Data source: https://data.cityofchicago.org/Education/Chicago-Public-Schools-School-Profile-Information-/8i6r-et8s

def prepare_data (path):
    chicago_school = pd.read_csv(os.path.join(path, 
                                          "Chicago_Public_Schools_-_School_Profile_Information_SY1617.csv"))
    df = chicago_school.loc[chicago_school['Is_High_School'] == "Y"] 
    df = df[['School_ID',
             "Short_Name", 
             'Long_Name', 
             'School_Type', 
             'Address', 
             'City', 
             'State', 
             'Zip']]
    return df

chicago_high_school = prepare_data(r'/Users/YIHAOLI/Desktop/Github/finalproject')

# Load the data of ethnicity of Chicago public high schools
        
def ethnicity_geography(excel):
    
    race = pd.read_excel (excel)
    race.columns = race.iloc[0]
    race.columns.name=None
    race.drop(0, axis=0, inplace=True)
    race = race.drop(race.index[0])
    race = race.reset_index(drop=True)
    race.drop(race.columns[[0]], axis=1, inplace=True)
    
    race.columns = ['School_ID', 'Long_Name', 'Total_Student', 'No_white', 
                'Pct_white', "No_black", 'Pct_black', 'No_pacific', 
                "Pct_pacific", 'No_native', 'Pct_native', 'No_hispanic', 
                'Pct_hispanic', 'No_multi', 'Pct_multi', 'No_asian',
                'Pct_asian', 'No_hawaiian', 'Pct_hawaiian', 'No_unknown', 
                'Pct_unknown']
    
    race['School_ID'] = race['School_ID'].astype(np.int64)
    
    df = pd.merge(race,
                 chicago_high_school,
                 on=['School_ID','Long_Name'], how='inner')
    
    df['Long_Name'] = df['Long_Name'].str.replace('HS','High School')
    
    return df

race_geo = ethnicity_geography(r'/Users/YIHAOLI/Desktop/Github/finalproject/school_ethnicity.xlsx')

# Load the US News 2020 data about how well each school prepared its students 
# for college. This dataset is generated by Tony Jia through web scrapping.
# Detailed code is contained in finalproject-usnewsData.py.

path = r'/Users/YIHAOLI/Desktop/Github/finalproject'
college_readiness = pd.read_csv(os.path.join(path, "data_college_readiness.csv"))


# Cleaning up school names

def fuzzy_merge(df_1, df_2, key1, key2, threshold=88, limit=10):
    
    s = df_2[key2].tolist()

    m = df_1[key1].apply(lambda x: process.extract(x, s, limit=limit))    
    df_1['matches'] = m

    m2 = df_1['matches'].apply(lambda x: ', '.join([i[0] for i in x if i[1] >= threshold]))
    df_1['matches'] = m2
    
    df_1['matches'] = df_1['matches'].replace(['Chicago Military Academy High School, Chicago Academy High School'],
                                    'Chicago Military Academy High School')

    df_1['matches'] = df_1['matches'].replace(['Chicago Academy High School, Chicago Military Academy High School, Chicago Technology Academy High School'],
                                    'Chicago Academy High School')
    
    df_1 = df_1.drop(76)
    df_1 = df_1.drop(124)
    df_1 = df_1.drop(44)
    
    df_1['matches'] = df_1['matches'].replace(['Chicago Technology Academy High School, Chicago Academy High School'],
                                    'Chicago Technology Academy High School')

    df_1 = df_1.rename(columns={'matches': 'School Name'})
    
    final_df = pd.merge(df_1,
                        college_readiness, 
                        on = 'School Name',
                        how = 'inner')

    return final_df

race_geo_college_readiness = fuzzy_merge(race_geo,
                                         college_readiness, 
                                         "Long_Name", 
                                         'School Name')

################################################################################################################

#Data Visualization

################################################################################################################


# Plot the Relation between Share of Minority Students and College Readiness

def race_vs_college(a,b,c,d,e):
    fig, ((ax1, ax2),(ax3,ax4))= plt.subplots(2, 2, figsize = (12,12))

    ax1.scatter(a, e)

    ax2.scatter(b,e)

    ax3.scatter(c,e)

    ax4.scatter(d,e)
    ax1.set(title = "Share of Black Students vs. College Readiness",
       xlabel = "Percentage of Black Students",
       ylabel = "College Readiness Index")
    ax2.set(title = "Share of Hispanic Students vs. College Readiness",
       xlabel = "Percentage of Hispanic Students",
       ylabel = "College Readiness Index")
    ax3.set(title = "Share of Asian Students vs. College Readiness",
       xlabel = "Percentage of Hispanic Students",
       ylabel = "College Readiness Index")
    ax4.set(title = "Share of White Students vs. College Readiness",
       xlabel = "Percentage of White Students",
       ylabel = "College Readiness Index")

    return fig

fig= race_vs_college(race_geo_college_readiness['Pct_black'],
                race_geo_college_readiness['Pct_hispanic'],
                race_geo_college_readiness['Pct_asian'],
                race_geo_college_readiness['Pct_white'],
                race_geo_college_readiness['College Readiness Index'])

fig.savefig("/Users/YIHAOLI/Desktop/Github/finalproject/race_vs_college.png")

# The four subplots race_vs_college.png , which are intended to show the 
# relationship between College Readiness Index and share of different races, 
# present a vague correlation between a school's share of African American 
# students and how well a school prepares its student to be ready for college. 
# Further investigation is demanded. 

# Spatial Data

# Data Source: https://data.cityofchicago.org/Facilities-Geographic-Boundaries/Boundaries-ZIP-Codes/gdcf-axmw

def geo_plot(path1):
    chicago_neighborhood = os.path.join(path1, 
                                    'geo_export_a467ef04-a7d9-4917-aaff-ef95b0c3061d.shp')

    df_chicago_neighborhood = geopandas.read_file(chicago_neighborhood)

    df_chicago_neighborhood["zip"] = df_chicago_neighborhood["zip"] .astype(int)
    df_chicago_neighborhood = df_chicago_neighborhood.rename(columns={'zip': 'Zip'})

    df_neighborhood_school = pd.merge(race_geo_college_readiness,
                                   df_chicago_neighborhood,
                                   on='Zip', how='inner')

    df_neighborhood_school = df_neighborhood_school.rename(columns={'College Readiness Index': 
                                                              'college_readiness_index'})

    df_neighborhood_school = GeoDataFrame(df_neighborhood_school)
    
    return df_neighborhood_school
    
neighborhood_school = geo_plot(r'/Users/YIHAOLI/Desktop/Github/finalproject/Boundaries - ZIP Codes')    

# Export the final dataframe
neighborhood_school.to_csv(r'/Users/YIHAOLI/Desktop/Github/finalproject/Final_Version_dataframe.csv')


# Plot the choropleth map on college readiness index 

from mpl_toolkits.axes_grid1 import make_axes_locatable

def geo_plot(df):
    fig, ax = plt.subplots(figsize=(12,12))

    divider = make_axes_locatable(ax)
    cax = divider.append_axes('right', 
                              size='5%', 
                              pad=0.1)
    
    ax = df[df.Zip != 60637].plot(ax=ax, 
                                  column='college_readiness_index', 
                                  legend=True, cax=cax)

    ax.axis('off')
    ax.set_title('How Well Chicago Public High Schools Prepare their Students for College by Neighborhood');
    
    return fig

fig = geo_plot(neighborhood_school)

fig.savefig('/Users/YIHAOLI/Desktop/Github/finalproject/College_Readiness_Geo.png')

# As the choropleth of College Readiness Index by Chicago neighborhood, 
# College_Readiness_Geo.png, shows, the dark-colored neighborhoods, meaning 
# neighborhoods having schools with low performance on preparing students for 
# college, spread over Chicago. A school's location does not have a close 
# association with how well it can prepare students for college. 


#########################################################################################################

# Applying a Model

#########################################################################################################

# Since we decide to find out whether a school's student racial proportion is 
# associated with how well each school prepares students for college, indicated 
# by the value College Readiness Index, the model of principal component
# analysis is chosen. 

X = race_geo_college_readiness[['Pct_white',
 'Pct_black',
 'Pct_native',
 'Pct_hispanic',
 'Pct_asian',
 'Pct_unknown',
 'College Readiness Index']]

# Determine the number of components: 

from sklearn.decomposition import PCA
def PCT_graph(df):
    
    pca = PCA().fit(X)
    plt.plot(np.cumsum(pca.explained_variance_ratio_))
    plt.title('Percentage of Explained Variance')
    plt.xlabel('number of components')
    plt.ylabel('cumulative explained variance');
    plt.savefig('/Users/YIHAOLI/Desktop/Github/finalproject/Explained_Variance.png')
    
    return plt

plt = PCT_graph(X)


#plt.show()


# As the explained variance graph, Explained_Variance.png, indicates, two 
# components are sufficient to explain all of the variance of a school's 
# student race proportion and College Readiness Index.

# Now apply the PCA model:
def PCA_2(df):
    
    pca = PCA(n_components=2)
    X_3D = pca.fit_transform(df)

    loadings = pd.DataFrame(pca.components_.T, columns=['PC1', 'PC2'])

    loadings['Variable']=list(X.columns)

    loadings = loadings[["Variable", "PC1", "PC2"]]
    
    return loadings

loading = PCA_2(X)

print(loading)

# As the dataframe "loading" points out, the first loading vector places
# a positive direction on the percentage of black students, Pct_black, and the
# percentage of students with unknown ethnicity, Pct_unknown. All other 
# variables, including College Readiness Index, are placed in a negative 
# direction by the first loading vector. An negative correlation between how 
# well a school prepares its students for college is negatively associated with 
# the number of African American and unknow-ethnicity students it has. Such 
# findng is exhibited by the second loading vector as well. 













